Basic-Example
=============
---
  kind: Pod                          # Object Type
  apiVersion: v1                     # API version
  metadata:                          # Set of data which describes the Object
    name: samplepod                  # Name of the Object
  spec:                              # Data which describes the state of the Object
    containers:                      # Data which describes the Container details
      - name: samplecont             # Name of the Container
        image: ubuntu:latest         # Base Image which is used to create Container
        command: ["/bin/bash", "-c", "while true; do echo Hello-Kubernetes; sleep 5 ; done"]
    restartPolicy: Never             # Defaults to Always


command
=======
kubectl apply -f testpod.yaml
kubectl get pods
kubectl get pods -o wide
kubectl describe pod samplepod
kubectl exec samplepod -it /bin/bash
kubectl exec samplepod -it -c samplecont /bin/bash
kubectl exec samplepod -- hostname -i
kubectl exec samplepod date
kubectl exec samplepod -c samplecont date
kubectl exec samplepod -c samplecont ls
kubectl logs -f samplepod
kubectl logs -f samplepod -c samplecont
kubectl delete -f testpod.yaml



=======================

---
  kind: Pod
  apiVersion: v1
  metadata:
    name: environments
  spec:
    containers:
      - name: mycont
        image: ubuntu:latest
        command: ["/bin/bash", "-c", "while true; do echo Hello-kubernetes; sleep 5 ; done"]
        env:                        # List of environment variables to be used inside the pod
          - name: MYNAME
            value: PPNREDDY

commands
========
kubectl exec environments -- /bin/bash -c  'echo $MYNAME'

==================
---
  kind: Pod
  apiVersion: v1
  metadata:
    name: http-pod
  spec:
    containers:
      - name: mycont
        image: httpd:latest
        ports:
          - containerPort: 80

  Commands
  kubectl exec http-pod -- hostname -i
  curl 10.244.54.7:80
  <html><body><h1>It works!</h1></body></html>


 
=====================

Pods with labels
================

---
  kind: Pod
  apiVersion: v1
  metadata:
    name: labelspod
    labels:                       # Specifies the Label details under it
      env: development
      class: pods
  spec:
    containers:
      - name: labelcont
        image: ubuntu:latest
        command: ["/bin/bash", "-c", "while true; do echo Hello-kubernetes; sleep 5 ; done"]

Commands
========

kubectl get pods --show-labels
kubectl label pods <podname> <labelkey>=<value>
kubectl get pods -l env=development
kubectl get pods -l env=development,class=pods
kubectl delete pod -l <labelkey>=<value>
kubectl get pods -l 'env in (development,testing)'
kubectl get pods -l 'env notin (development,testing)'

===============

Pod with annotations
====================
---
  kind: Pod
  apiVersion: v1
  metadata:
    name: annotations-pod
    labels:
      app: apache
    annotations:
      description: "Deployment for Apache HTTP Server"
      maintainer: "ppreddy@hcltech.com"
  spec:
    containers:
      - name: mycont
        image: httpd:latest
        ports:
          - containerPort: 80


===================

Multi container pods
====================

kind: Pod
apiVersion: v1
metadata:
  name: multicontpod
spec:
  containers:
    - name: container-1
      image: ubuntu:latest
      command: ["/bin/bash", "-c", "while true; do echo Hello-India; sleep 5 ; done"]
    - name: container-2
      image: ubuntu:latest
      command: ["/bin/bash", "-c", "while true; do echo Hello-Karnataka; sleep 5 ; done"]

Commands
========
kubectl get pods
kubectl exec multicontpod -it -c container-1 /bin/bash
kubectl exec multicontpod -it -c container-2 /bin/bash
kubectl logs -f multicontpod -c container-1
kubectl logs -f multicontpod -c container-2

========================

Node Selector
=============
kubectl label nodes ip-10-1-1-18 disktype=ssd

---
  apiVersion: v1
  kind: Pod
  metadata:
    name: my-pod
  spec:
    containers:
      - name: container-1
        image: ubuntu:latest
        command: ["/bin/bash", "-c", "while true; do echo Hello-India; sleep 5 ; done"]
    nodeSelector:
      disktype: ssd

Commands:
kubectl apply -f testpod.yaml
kubectl get pods -o wide
kubectl describe node ip-10-1-1-18

=============================================
---
  kind: ReplicationController         # This defines to create the object of replication type
  apiVersion: v1
  metadata:
    name: myrc
  spec:
    replicas: 2       # This element defines the desired number of pods
    selector: # Tells the controller which pods to watch/belong to this Replication Controller
      myname: ppreddy   # These must match the labels
    template:           # Template element defines a template to launch a new pod
      metadata:
        name: rcpod
        labels:            
          myname: ppreddy
      spec:
        containers:
          - name: rccontainer
            image: ubuntu:latest
            command: ["/bin/bash", "-c", "while true; do echo Hello-ppreddy; sleep 5 ; done"]

Commands
========

kubectl apply -f rc-demo.yaml
kubectl get rc
kubectl get pods
kubectl describe rc myrc
kubectl get pods -o wide
kubectl delete pod myrc-pt9d6
kubectl get pods -o wide

kubectl get pods -l myname=ppreddy
kubectl scale rc myrc --replicas=10
kubectl scale rc myrc --replicas=5

kubectl delete -f rc-demo.yaml


======================================

## ReplicaSet Demo

---
  kind: ReplicaSet                        # Defines the object to be ReplicaSet
  apiVersion: apps/v1                     # Replicaset is not available on v1
  metadata:
    name: myrs
  spec:
    replicas: 2  
    selector:                  
      matchExpressions:                    # These must match the labels
        - {key: myname, operator: In, values: [ppreddy, ppnreddy, preddy]}
        - {key: env, operator: NotIn, values: [production]}
    template:      
      metadata:
        name: rspod
        labels:              
          myname: ppreddy
          env: dev
      spec:
        containers:
          - name: rscontainer
            image: ubuntu:latest
            command: ["/bin/bash", "-c", "while true; do echo Hello-ppreddy; sleep 5 ; done"]



Commands
========
kubectl apply -f rs-demo.yaml
kubectl get rs
kubectl describe rs myrs

kubectl get pods
kubectl delete pod myrs-v7ggf
kubectl get pods

kubectl get pods -l myname=ppreddy
kubectl get pods -l env=dev

kubectl scale rs myrs --replicas=10
kubectl scale rs myrs --replicas=5

kubectl delete -f rs-demo.yaml


=============================================
---
  kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: mydeployments
  spec:
    replicas: 2
    selector:      # tells the controller which pods to watch/belong to
      matchLabels:
        name: deployment
    template:
      metadata:
        name: deppod
        labels:
          name: deployment
      spec:
        containers:
          - name: dep-cont
            image: ubuntu:latest
            command: ["/bin/bash", "-c", "while true; do echo Hello-DevOps; sleep 5; done"]

Commands
========
kubectl apply -f deploy-demo.yaml
kubectl get deployment
kubectl describe deployment mydeployments
kubectl get rs
kubectl get pods
kubectl get pods -o wide

kubectl delete pod  mydeployments-84877d89c9-vw9gd
kubectl get pods

kubectl delete rs mydeployments-84877d89c9
kubectl get rs
kubectl get pods

kubectl scale deployment mydeployments --replicas=10
kubectl get deployment
kubectl describe deployment mydeployments
kubectl get rs
kubectl get pods

kubectl scale deployment mydeployments --replicas=1
kubectl get deployment
kubectl describe deployment mydeployments
kubectl get rs
kubectl get pods

kubectl logs -f mydeployments-84877d89c9-7pk2m

Lets deploy another version
---------------------------
---
  kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: mydeployments
  spec:
    replicas: 2
    selector:      # tells the controller which pods to watch/belong to
      matchLabels:
        name: deployment
    template:
      metadata:
        name: deppod
        labels:
          name: deployment
      spec:
        containers:
          - name: dep-cont
            image: centos:latest
            command: ["/bin/bash", "-c", "while true; do echo Hello-DevOps-centos; sleep 5; done"]


Commands
========
kubectl apply -f deploy-demo.yaml
kubectl get deployment
kubectl describe deployment mydeployments
kubectl get rs
kubectl get pods
kubectl get pods -o wide

kubectl logs -f mydeployments-9cf4bc565-tn9z2

kubectl rollout status deployment mydeployments
kubectl rollout history deployment mydeployments
kubectl rollout undo deploy/mydeployments --to-revision=1

kubectl get rs
kubectl get pods
kubectl get pods -o wide

kubectl logs -f mydeployments-84877d89c9-dwm26
kubectl get deployment
kubectl describe deployment mydeployments

kubectl delete -f deploy-demo.yaml


==========================

# DaemonSet demo

---
  apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: nginx-ds
  spec:
    selector:
      matchLabels:
        app: nginx-app
    template:
      metadata:
        name: nginx-pod
        labels:
          app: nginx-app
      spec:
        containers:
          - name: nginx-container
            image: nginx:latest
            ports:
              - containerPort: 80

Commands
========
kubectl apply -f ds-demo.yaml

kubectl get ds
kubectl get rs
kubectl get pods
kubectl get pods -o wide
kubectl describe ds nginx-ds

kubectl delete -f  ds-demo.yaml


===================================
Container to Container communication
====================================

ctoc.yaml
=========

---
  kind: Pod
  apiVersion: v1
  metadata:
    name: testpod
  spec:
    containers:
      - name: uc
        image: ubuntu:latest
        command: ["/bin/bash", "-c", "while true; do echo Hello-Kubernetes; sleep 5 ; done"]
      - name: hc
        image: httpd:latest
        ports:
         - containerPort: 80

commands:
=========
kubectl apply -f ctoc.yaml
kubectl exec testpod -it -c uc -- /bin/bash
root@testpod:/# apt update && apt install curl
root@testpod:/# curl localhost:80
kubectl delete -f ctoc.yaml



============================
Pod to Pod communication
========================

podnginx.yaml
=============

---
  kind: Pod
  apiVersion: v1
  metadata:
    name: testpodnginx
  spec:
    containers:
      - name: nc
        image: nginx:latest
        ports:
         - containerPort: 80


podhttpd.yaml
=============
---
  kind: Pod
  apiVersion: v1
  metadata:
    name: testpodhttpd
  spec:
    containers:
      - name: hc
        image: httpd:latest
        ports:
         - containerPort: 80

commands:
=========
kubectl apply -f podnginx.yaml
kubectl apply -f podhttpd.yaml
kubectl get pods
kubectl get pods -o wide
curl 10.244.54.42:80
curl 10.244.54.41:80
kubectl delete -f podnginx.yaml
kubectl delete -f podhttpd.yaml


=====================================================
clusterIP-Service

clusteripdeployment.yaml
========================

---
  kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: mydeployments
  spec:
    replicas: 2
    selector:      # tells the controller which pods to watch/belong to
      matchLabels:
        name: deployment
    template:
      metadata:
        name: testpod8
        labels:
          name: deployment
      spec:
        containers:
          - name: hc
            image: httpd
            ports:
              - containerPort: 80



clusteripservice.yaml
=====================

---
  kind: Service                  # Defines to create Service type Object
  apiVersion: v1
  metadata:
    name: democipservice
  spec:
    ports:
      - port: 80                # Containers port exposed
        targetPort: 80          # Pods port
    selector:
      name: deployment          # Apply this service to any pods which has the specific label
    type: ClusterIP             # Specifies the service type i.e ClusterIP or NodePort


commands:
=========
kubectl apply -f clusteripdeployment.yaml
kubectl apply -f clusteripservice.yaml
kubectl get pods
kubectl get svc
curl 10.96.78.101:80
kubectl delete pod mydeployments-779f4dbf96-rc89d
kubectl get pods
curl 10.96.78.101:80


================================
NodePort Service
=================


nodeportdeployment.yaml
========================

---
  kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: mydeployments
  spec:
    replicas: 4
    selector:      # tells the controller which pods to watch/belong to
      matchLabels:
        name: deployment
    template:
      metadata:
        name: testpod8
        labels:
          name: deployment
      spec:
        containers:
          - name: hc
            image: httpd
            ports:
              - containerPort: 80



nodeportservice.yaml
====================

---
  kind: Service                  # Defines to create Service type Object
  apiVersion: v1
  metadata:
    name: demonpservice
  spec:
    ports:
      - port: 80                # Containers port exposed
        targetPort: 80          # Pods port
    selector:
      name: deployment          # Apply this service to any pods which has the specific label
    type: NodePort             # Specifies the service type i.e ClusterIP or NodePort


commands:
=========
kubectl apply -f nodeportdeployment.yaml
kubectl apply -f nodeportservice.yaml
kubectl get pods
kubectl get svc

access URL's in browser:
   http://18.218.106.172:30647/
   http://3.145.94.69:30647/
   http://3.129.253.12:30647/

kubectl delete -f nodeportdeployment.yaml
kubectl delete -f nodeportservice.yaml


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

---
  kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: mydeployments
  spec:
    replicas: 1
    selector:      # tells the controller which pods to watch/belong to
      matchLabels:
        name: deployment
    template:
      metadata:
        name: testpod8
        labels:
          name: deployment
      spec:
        containers:
          - name: hc
            image: httpd
            ports:
              - containerPort: 80


apiVersion: v1
kind: Service
metadata:
  name: my-app-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # or "clb" for Classic Load Balancer
spec:
  selector:
    app: deployment
  ports:
    - protocol: TCP
      port: 80            # Expose on port 80
      targetPort: 8080     # Target container port
  type: LoadBalancer      # Create an ELB


  ===========================